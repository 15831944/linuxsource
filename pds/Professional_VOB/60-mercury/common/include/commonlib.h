#ifndef _COMMONLIB_H_
#define _COMMONLIB_H_

//#include "osp.h"
#include "kdvtype.h"
#include "kdvdef.h"
#include "kdvsys.h"
#include "osp.h"
//#include "mcuconst.h"
#include "mcustruct.h"	// [1/14/2010 xliang] add // 新的ubuntu已经不用包 [pengguofeng 9/25/2013]
//仍保留，防止MCU等等大改

//#include "commonclass.h"

#ifdef _LINUX_
#include <sys/types.h>
// 头文件不属于Win32 [pengguofeng 11/19/2013]
#include <sys/wait.h>
#include <dirent.h>
#endif

#ifdef WIN32
#pragma comment (lib,"setupapi")

#include   "iostream.h"
#include   "stdio.h"   
#include   <tchar.h>           
#include   <windows.h>       
#include   <setupapi.h>   
#endif

/*
class CSemOpt{
public:
    CSemOpt( SEMHANDLE &hSem, u32 dwTime = WAIT_SEM_TIMEOUT )
    {
        m_hSem = hSem;
        if( OspSemTakeByTime( m_hSem, dwTime ) != TRUE )
        {
            OspPrintf( TRUE, FALSE, "semTake error accord to handle<0x%x>\n", hSem );
        }
    }
    ~CSemOpt( )
    {
        OspSemGive( m_hSem );
    }
private:
    SEMHANDLE m_hSem;
};

*/
// macro [pengguofeng 9/16/2013]
#ifdef _LINUX_
#define ETH_STR		(LPCSTR)"eth"
#define GW_KEY      (LPCSTR)"GATEWAY"
#define IP_KEY      (LPCSTR)"IPADDR"
#define HWADDR_KEY  (LPCSTR)"HWADDR"
#define MACADDR_KEY	(LPCSTR)"MACADDR"
#define DEVICE_KEY  (LPCSTR)"DEVICE"
#define NETMAS_KEY  (LPCSTR)"NETMASK"
#define TYPE_KEY    (LPCSTR)"Ethernet"
#define ONBOOT_KEY  (LPCSTR)"ONBOOT"
#define BOOTPR_KEY  (LPCSTR)"BOOTPROTO"

// ubuntu [pengguofeng 9/16/2013]
#define IPCONF_FILE_REDHAT		(LPCSTR)"/etc/sysconfig/network-scripts/ifcfg-eth"		//ubuntu配置文件
#define IPCONF_FILE_UBUNTU		(LPCSTR)"/etc/network/interfaces"		//redhat配置文件
#define IP_STR			(LPCSTR)"address"						//IP地址
#define NETMASK_STR		(LPCSTR)"netmask"						//子网掩码
#define GW_STR			(LPCSTR)"gateway"						//网关
#define HWADDR_STR		(LPCSTR)"pre-up ifconfig eth%d hw ether"	//写的时候直接用空格

#define JUDGE_LINUX_OS_STR  (LPCSTR)"lsb_release -i | cut -f2"
#define OS_REDHAT_STR		(LPCSTR)"RedHat"
#define OS_CENTOS_STR		(LPCSTR)"CentOS"
#define OS_UBUNTU_STR		(LPCSTR)"Ubuntu"

// 此字符串需要指定ethIdx和IPCONF_FILE [pengguofeng 9/18/2013]
#define GET_ETH_INFO_CMD	(LPCSTR)"sed -n '/^auto eth%d$/, /%s/p' %s"
#define DEL_ETH_INFO_CMD	(LPCSTR)"sed -i '/%s %s/d' %s"
#define MOD_ETH_INFO_CMD	(LPCSTR)"sed -i 's/%s %s/%s %s/' %s"
#define ADD_ETH_INFO_CMD	(LPCSTR)"sed -i '/iface eth%d inet/a\%s %s' %s"

#define ADD_STATIC_ROUTE_CMD	(LPCSTR)"route add -net %s netmask %s gw %s dev eth%d"
#define DEL_STATIC_ROUTE_CMD	(LPCSTR)"route del -net %s netmask %s gw %s dev eth%d"
#endif // _LINUX_

//os type
#define OS_WIN32	(u8)0			//win32的平台
#define OS_REDHAT	(u8)1			//red_hat  & centOS
#define OS_UBUNTU	(u8)2			//ubuntu

// for test 
#ifdef _DEBUG
#define DBG_LOG	 printf
#else
#define DBG_LOG 
#endif

// linux通用结构体定义 [pengguofeng 9/25/2013]
//////////////////////////////////////////////////////////////////////////
/*
*/
#define MAX_ETH_NUM				(u8)3				//最多的网卡数
#define MAX_MACADDR_NORMAL_LEN	(u8)6				//MAC地址最大长度:16进制
#define MAX_MACADDR_STR_LEN		(u8)32				//MAC地址最大长度:字符串
#define MAX_ETH_IPNUM			(u8)16				//最多子网卡数目
#define INVALID_ETHID			(u8)0xFF			//非法的网卡ID
struct TEthInfo 
{
public: //外部感知de接口
	TEthInfo() { Clear(); }
	~TEthInfo() { Clear(); }
	void Clear();

/*=============================================================================
函 数 名： IsValid
功    能： 判断此结构体是否合法
算法实现： 
全局变量： 
参    数： 
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
	BOOL32	IsValid();
/*=============================================================================
函 数 名： DelAllIpMask
功    能： 删除所有的Ip和Mask
算法实现： 
全局变量： 
参    数： 
返 回 值： void 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/10/14   4.7			彭国锋                  创建
=============================================================================*/
	void	DelAllIpMask();
/*=============================================================================
函 数 名： GetEthId
功    能： 取本结构体对应的网卡ID，[主ID]
算法实现： 
全局变量： 
参    数： 
返 回 值： u8 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
	u8		GetEthId(void);
/*=============================================================================
函 数 名： SetEthId
功    能： 设置网卡ID，[主ID]
算法实现： 
全局变量： 
参    数： u8
返 回 值： void 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
	void	SetEthId(u8 byEthId);
/*=============================================================================
函 数 名： GetIpNum
功    能： 取当前有多少IP
算法实现： 
全局变量： 
参    数： 
返 回 值： u8 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
	u8		GetIpNum(void);

/*=============================================================================
函 数 名： GetSubIp
功    能： 取子网卡IP
算法实现： 
全局变量： 
参    数： u8
返 回 值： u32 ,主机序
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
	u32		GetSubIp(u8 byIdx);
/*=============================================================================
函 数 名： GetSubMask
功    能： 取子网卡MASK
算法实现： 
全局变量： 
参    数： u8
返 回 值： u32 ,主机序
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
	u32		GetSubMask(u8 byIdx);
/*=============================================================================
函 数 名： AddSubIpMask
功    能： 	添加一个虚拟IP/MASK
算法实现： 
全局变量： 
参    数：	u32 dwIP，主机序
			u32 dwMask, 主机序
返 回 值： BOOL32， 成功 1 OR失败 0
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
	BOOL32	AddSubIpMask(u32 dwIp, u32 dwMask);
/*=============================================================================
函 数 名： ModSubIpMask
功    能： 	修改指定IP的网关
算法实现： 
全局变量： 
参    数：	u32 dwIP，主机序
			u32 dwMask, 主机序
返 回 值： void
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
	void	ModSubIpMask(u32 dwIp, u32 dwMask);
/*=============================================================================
函 数 名： DelSubIpMask
功    能： 根据IP，删除指定的子网卡IP MASK
算法实现： 
全局变量： 
参    数：	u32 dwIP，主机序
返 回 值： void
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
	void	DelSubIpMask(u32 dwIp);
/*=============================================================================
函 数 名： SetSubIpMaskByIdx
功    能： 根据子网卡ID，删除指定的子网卡IP MASK
算法实现： 
全局变量： 
参    数：	u32 dwIP，主机序
			u32 dwMask,主机序
			u8	byIdx, 子网卡ID
返 回 值： void
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
	void	SetSubIpMaskByIdx(u32 dwIp, u32 dwMask, u8 byIdx); 

/*=============================================================================
函 数 名： GetGateway
功    能： 取主网卡的网关
算法实现： 
全局变量： 
参    数：	
返 回 值： u32， 主机序
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
	u32		GetGateway(void);
/*=============================================================================
函 数 名： SetGateway
功    能： 设主网卡的网关
算法实现： 
全局变量： 
参    数：	u32 dwGw， 主机序
返 回 值： 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
	void	SetGateway(u32 dwGw);
/*=============================================================================
函 数 名： DelGateway
功    能： 删除主网卡的网关
算法实现： 
全局变量： 
参    数：
返 回 值： 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
	void	DelGateway(void);

/*=============================================================================
函 数 名： SetMacAddr
功    能： 设置MAC地址
算法实现： 
全局变量： 
参    数：	u8 *pbyMac， 16进制形式的MAC地址{AA,BB,CC,DD,EE,FF}
			u8 byMacLen
返 回 值： 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
	void	SetMacAddr(u8 *pbyMac, u8 byMacLen);
/*=============================================================================
函 数 名： SetMacAddrByStr
功    能： 设置MAC地址
算法实现： 
全局变量： 
参    数：	s8 *pachMacStr， 字符串形式的MAC地址{"AA:BB:CC:DD:EE:FF"}
			u8 byMacLen
返 回 值： 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
	void	SetMacAddrByStr(s8 *pachMacStr, u8 byMacLen);//根据字符串，直接拷贝
/*=============================================================================
函 数 名： GetMacAddrStr
功    能： 获取MAC地址,字符串形式,以\0结尾
算法实现： 
全局变量： 
参    数：	
返 回 值： s8 *
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
	s8	*	GetMacAddrStr(void);
/*=============================================================================
函 数 名： GetMacAddr
功    能： 获取MAC地址，以16进制形式保存到参数中，注意返回的都是有效值，不包含\0
			外部使用者，需要拷贝的时候，自己再拷贝！
算法实现： 
全局变量： 
参    数：	u8 *pbyMac， 存放的数组
			u8 *pbyMacLen, 返回的实际长度
返 回 值： BOOL32
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
	BOOL32	GetMacAddr(u8 *pbyMac, u8 *pbyMacLen);
/*=============================================================================
函 数 名： GetMacAddrLen
功    能： 获取MAC地址[字符串]的长度
算法实现： 
全局变量： 
参    数：	
返 回 值： u8
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
	u8		GetMacAddrLen(void);

/*=============================================================================
函 数 名： operator =
功    能： 赋值构造函数
算法实现： 
全局变量： 
参    数：	
返 回 值： TEthInfo &
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
	TEthInfo & operator = (TEthInfo & tEthInfo);
/*=============================================================================
函 数 名： Print
功    能： 打印函数，目前只在OspPrint，在23端口打印，则需要使用DEBUG版本的库
算法实现： 
全局变量： 
参    数：	
返 回 值： void
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
	void	Print();

protected:
/*=============================================================================
函 数 名： AddIpNum
功    能： 添加子IP数目，这个是连主IP一起计算的
算法实现： 
全局变量： 
参    数：	
返 回 值： void
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
	void	AddIpNum();
/*=============================================================================
函 数 名： GetSubIdxByIp
功    能： 根据IP得到它的子网卡ID
算法实现： 
全局变量： 
参    数：	u32 dwHostIp， 主机序
返 回 值： u8
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
	u8		GetSubIdxByIp(u32 dwHostIp);
/*=============================================================================
函 数 名： DelSubIpMaskByIdx
功    能： 根据IP得到它的子网卡ID
算法实现： 
全局变量： 
参    数：	u8 byIdx,子网卡ID
返 回 值： void
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
	void	DelSubIpMaskByIdx(u8 byIdx);
private:
	u8		m_byEthId;						//网卡ID:0,1,2...   初始值为0xFF
	u8		m_byIpNum;						//当前有效的IP数目
	u8		m_byMacLen;						//MAC地址长度
	s8		m_achMacAddr[MAX_MACADDR_STR_LEN];	//MAC地址：字符串形式
	u32		m_dwGateway;					//网关：网络序
	u32		m_dwIp[MAX_ETH_IPNUM];			//子网卡IP:网络序
	u32		m_dwMask[MAX_ETH_IPNUM];		//子网卡网络序
};
//////////////////////////////////////////////////////////////////////////

// 公用接口定义 [pengguofeng 9/25/2013]
/*=============================================================================
函 数 名： SetEthInfo
功    能： 将指定个数的网卡信息设置到配置文件中，使之重启之后生效
算法实现： 
全局变量： 
参    数：	TEthInfo *ptEthInfo， 网卡信息
			const u8 byEthNum，指定的网卡个数，范围：1~MAX_ETH_NUM
返 回 值： BOOL32 成功 TRUE； 失败 FALSE
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
BOOL32	SetEthInfo(TEthInfo *ptEthInfo, const u8 byEthNum);

/*=============================================================================
函 数 名： GetEthInfo
功    能： 从系统当前IP配置中获取网卡信息，而非/etc/network/interface配置文件
算法实现： 
全局变量： 
参    数：	TEthInfo *ptEthInfo， 网卡信息
			u8 &byEthNum，返回的网卡个数，范围：1~MAX_ETH_NUM
			const u8 byEthId， 获取指定网卡或者是获取全部网卡
返 回 值： BOOL32 成功 TRUE； 失败 FALSE。注意byEthNum等于0也是返回FALSE，所以上层只需要判断返回值
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
BOOL32	GetEthInfo(TEthInfo *ptEthInfo, u8 &byEthNum, const u8 byEthId = INVALID_ETHID);

/*=============================================================================
函 数 名： DelEthInfo
功    能： 删除网卡信息，并写入配置文件
算法实现： 
全局变量： 
参    数：	u8 *pbyEthId， 待删除的网卡ID
			const u8 byEthNum，待删除的网卡个数，范围：1~MAX_ETH_NUM
返 回 值： BOOL32 成功 TRUE； 失败 FALSE
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
BOOL32	DelEthInfo(u8 *pbyEthId, const u8 byEthNum);

/*=============================================================================
函 数 名： SetEthMainIp
功    能： 设置网卡的主IP、MASK、GATEWAY信息，并写入配置文件。
			此接口也可作为添加主IP使用
算法实现： 
全局变量： 
参    数：	u8 byEthId, 待设置的网卡ID
			u32 dwIp,   主机序
			u32 dwMask, 主机序
			u32 dwGw，  主机序
返 回 值： BOOL32 成功 TRUE； 失败 FALSE
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
BOOL32	SetEthMainIp(u8 byEthId, u32 dwIp, u32 dwMask, u32 dwGw);

/*=============================================================================
函 数 名： SetEthSubIp
功    能： 设置子网卡的IP、MASK信息，并写入配置文件。在没有主网卡的IP时，不可作为添加子网卡的IP
算法实现： 
全局变量： 
参    数：	u8 byEthId, 待设置的网卡ID
			u8 byEthSubId, 子网卡ID
			u32 dwIp,   主机序
			u32 dwMask, 主机序
返 回 值： BOOL32 成功 TRUE； 失败 FALSE
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
BOOL32	SetEthSubIp(u8 byEthId, u8 byEthSubId, u32 dwIp, u32 dwMask);

/*=============================================================================
函 数 名： AddEthIp
功    能： 给网卡添加IP、MASK、Gateway信息，并写入配置文件。
			如果是只添加子网卡，那么dwGw一定不要填值
算法实现： 
全局变量： 
参    数：	u8 byEthId, 待设置的网卡ID
			u8 byEthSubId, 子网卡ID
			u32 dwIp,   主机序
			u32 dwMask, 主机序
返 回 值： BOOL32 成功 TRUE； 失败 FALSE
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
BOOL32	AddEthIp(u8 byEthId, u32 dwIp, u32 dwMask, u32 dwGw = 0 );

/*=============================================================================
函 数 名： GetEthMainIp
功    能： 取主网卡的IP、MASK信息
算法实现： 
全局变量： 
参    数：	u8 byEthId, 待设置的网卡ID
			u8 byEthSubId, 子网卡ID
			u32 &dwIp,   主机序		[OUT]
			u32 &dwMask, 主机序		[OUT]
			u32 &dwGw， 主机序		[OUT]
返 回 值： BOOL32 成功 TRUE； 失败 FALSE
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
BOOL32	GetEthMainIp(u8 byEthId, u32 &dwIp, u32 &dwMask, u32 &dwGw );

/*=============================================================================
函 数 名： GetEthSubIp
功    能： 取子网卡的IP、MASK信息
算法实现： 
全局变量： 
参    数：	u8 byEthId, 待设置的网卡ID
			u8 byEthSubId, 子网卡ID
			u32 &dwIp,   主机序		[OUT]
			u32 &dwMask, 主机序		[OUT]
返 回 值： BOOL32 成功 TRUE； 失败 FALSE
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
BOOL32	GetEthSubIp(u8 byEthId, u8 byEthSubId, u32 &dwIp, u32 &dwMask);

/*=============================================================================
函 数 名： DelEthIp
功    能： 删除网卡的指定IP、MASK信息
算法实现： 
全局变量： 
参    数：	u8 byEthId, 待设置的网卡ID
			u32 dwIp,   主机序		
返 回 值： BOOL32 成功 TRUE； 失败 FALSE
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
BOOL32	DelEthIp(u8 byEthId, u32 dwIp);

/*=============================================================================
函 数 名： SetEthHWaddr
功    能： 设置网卡的MAC地址，写入系统配置文件
算法实现： 
全局变量： 
参    数：	u8 byEthId, 待设置的网卡ID
			s8 *pMacAddrStr,   字符串形式的MAC地址		
返 回 值： BOOL32 成功 TRUE； 失败 FALSE
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
BOOL32	SetEthHWaddr(u8 byEthId, s8 *pMacAddrStr);

/*=============================================================================
函 数 名： GetEthHWaddr
功    能： 获取网卡的MAC地址。注意：长度不包含\0
算法实现： 
全局变量： 
参    数：	u8 byEthId, 待设置的网卡ID
			s8 *pMacAddrStr,   字符串形式的MAC地址	
			u8 *pbyLen， 返回MAC地址的实际长度
返 回 值： BOOL32 成功 TRUE； 失败 FALSE
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
BOOL32	GetEthHWaddr(u8 byEthId, s8 *pMacAddrStr, u8 *pbyLen);

/*=============================================================================
函 数 名： DelEthHWaddr
功    能： 删除网卡的MAC地址，写入系统配置文件。注意：长度不包含\0
算法实现： 
全局变量： 
参    数：	u8 byEthId, 待设置的网卡ID
返 回 值： BOOL32 成功 TRUE； 失败 FALSE
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
BOOL32	DelEthHWaddr(u8 byEthId);

/*=============================================================================
函 数 名： AddSysRoute
功    能： 给linux系统添加一条静态路由。此路由必须合法
算法实现： 
全局变量： 
参    数：	u8 byEthId, 待设置的网卡ID
			u32 dwIp，主机序
			u32 dwMask，主机序
			u32 dwGw， 主机序
返 回 值： BOOL32 成功 TRUE； 失败 FALSE
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
BOOL32	AddSysRoute(u8 byEthId, u32 dwIp, u32 dwMask, u32 dwGw);

/*=============================================================================
函 数 名： DelEthHWaddr
功    能： 删除系统的静态路由
算法实现： 
全局变量： 
参    数：	u8 byEthId, 待设置的网卡ID
			u32 dwIp，主机序
			u32 dwMask，主机序
			u32 dwGw， 主机序
返 回 值： BOOL32 成功 TRUE； 失败 FALSE
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/27   4.7			彭国锋                  创建
=============================================================================*/
BOOL32	DelSysRoute(u8 byEthId, u32 dwIp, u32 dwMask, u32 dwGw);
// add end [pengguofeng 9/25/2013]

//<<<<<<<<<<<<<<<<<<<<<<<<<<<win32 ，Linux共用>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

/*=============================================================================
函 数 名： FileLog
功    能： 把字符串输出到pLogFile指向的文件中，文件指针由调用者提供，函数不关闭文件
算法实现： 
全局变量： 
参    数： FILE * pLogFile
s8 * pszFmt
...
返 回 值： API void 
=============================================================================*/
API void FileLog( FILE * pLogFile, s8 * pszFmt, ... );


/*=============================================================================
函 数 名： CreatDir
功    能： 创建目录
算法实现： 
全局变量： 
参    数： const s8* lpszDirPath
返 回 值： BOOL32 
=============================================================================*/
API BOOL32 CreatDir(const s8* lpszDirPath);

/*=============================================================================
函 数 名： CreatFile
功    能： 创建任意路径下的文件，同时自动创建需要的目录
算法实现： 
全局变量： 
参    数： const s8 * lpszFileFullPath  // 文件全路径，含文件名
返 回 值： BOOL32 
=============================================================================*/
API BOOL32 CreatFile( const s8 * lpszFileFullPath );


/*=============================================================================
函 数 名: GetWHViaRes 
功    能: 通过分辨率获取宽高
参    数: u8 byRes [IN]       分辨率
u16 &wWidth [OUT]   宽
u16 &wHeight [OUT]  高
注    意: 无
返 回 值: void
=============================================================================*/
API u8 GetResViaWH( u16 wWidth, u16 wHeight );


/*=============================================================================
函 数 名: GetWHViaRes 
功    能: 通过分辨率获取宽高
参    数: u8 byRes [IN]       分辨率
u16 &wWidth [OUT]   宽
u16 &wHeight [OUT]  高
注    意: 无
返 回 值: void
=============================================================================*/
API void GetWHViaRes(u8 byRes, u16 &wWidth, u16 &wHeight);

/*=============================================================================
函 数 名: IsResBigger 
功    能: 比较分辨率大小
参    数: u8 bySrcRes :要比较的第一个分辨率    u8 byDstRes：要比较的第二个分辨率
注    意: 
返 回 值: BOOL32 TRUE：前一分辨率大于后一分辨率，FALSE，前一分辨率不大于后一分辨了
=============================================================================*/
API BOOL32 IsResBigger(u8 bySrcRes, u8 byDstRes);

/*=============================================================================
函 数 名: IsResolutionPresentation 
功    能: 判断分辨率是否属于VGA类的分辨率
参    数: u8 byRes [IN]       分辨率

注    意: 无
返 回 值: TRUE：属于，FALSE：不属于
=============================================================================*/
API BOOL32 IsResolutionPresentation(u8 byRes);

/*=============================================================================
函 数 名: IsResolutionLive 
功    能: 判断分辨率是否属于非VGA类分辨率
参    数: u8 byRes [IN]       分辨率

注    意: 无
返 回 值: TRUE：属于，FALSE：不属于
=============================================================================*/
API BOOL32 IsResolutionLive(u8 byRes);

/*=============================================================================
函 数 名: IsDstSrcResMatched 
功    能: 判断两个分辨率是否是同一类型的分辨率
参    数: u8 byRes [IN]       分辨率

注    意: 无
返 回 值: void
=============================================================================*/
API BOOL32 IsDstSrcResMatched(u8 bySrcRes, u8 byDstRes);

/*====================================================================
函数名      : GetMediaStr
功能        : 获取媒体类型字符串
算法实现    :（可选项）
引用全局变量: 无
输入参数说明: byMediaType 媒体类型
返回值说明  : 无
====================================================================*/
API LPCSTR GetMediaString( u8 byMediaType );

/*=============================================================================
函 数 名： strofip 
功    能： 得到Ip字符串
算法实现： 
全局变量： 
参    数： u32 dwIp
bBONet -- 传入参数是否为网络序，默认为主机序
返 回 值： s8 * 
=============================================================================*/
API s8* strofip(u32 dwIp, BOOL32 bBONet = FALSE);

/*=============================================================================
函 数 名：   AddSysDefaultGW
功    能： 
算法实现： 
全局变量： 
参    数： u32 dwGatewayIp  // 主机序
			u8  byEthId      //网卡ID
返 回 值： API void 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/12/8   4.0			周广程                  创建
2013-9-17   4.7         彭国锋					支持ubuntu和多网口模式
=============================================================================*/
API void   AddSysDefaultGW( u32 dwGatewayIp, u8 byEthId);  // 主机序

/*=============================================================================
函 数 名：   DelSysDefaultGW
功    能： 
算法实现： 
全局变量： 
参    数： u8 byEthId //网卡ID
返 回 值： API void 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/12/8   4.0			周广程                  创建
=============================================================================*/
API void   DelSysDefaultGW( u8 byEthId );


BOOL32 GetNetAdapterInfoActive( TNetAdaptInfoAll * ptNetAdaptInfoAll );
BOOL32 GetNetAdapterInfoAll( TNetAdaptInfoAll * ptNetAdaptInfoAll );
BOOL32 GetNetAdapterInfo( TNetAdaptInfoAll * ptNetAdaptInfoAll, BOOL32 bActive = TRUE );

/*=============================================================================
函 数 名： GetAdapterIp
功    能： 获取指定网卡的IP配置
算法实现： 
全局变量： 
参    数： [IN]u32 dwIfIndex:网口号
           [IN/OUT]TBrdEthParamAll* ptAllEthParm:
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2010/4/12   4.0		    付秀华                  创建
=============================================================================*/
BOOL32 GetAdapterIp( u32 dwIfIndex, TMcuBrdEthParamAll* ptAllEthParm);


//<<<<<<<<<<<<<<<<<<<<<<<<<<<仅win32用>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> 
#ifdef WIN32
/*=============================================================================
函 数 名： RegEnableDHCP
功    能： 
算法实现： 
全局变量： 
参    数： s8* lpszAdpName
           BOOL32 bEnable
返 回 值： BOOL32 
=============================================================================*/
BOOL32 RegEnableDHCP( const s8* lpszAdpName, BOOL32 bEnable );

/*=============================================================================
函 数 名： RegIsEnableDHCP
功    能： 
算法实现： 
全局变量： 
参    数： s8* lpszAdpName
返 回 值： BOOL32 
=============================================================================*/
BOOL32 RegIsEnableDHCP( const s8* lpszAdpName );

/*=============================================================================
  函 数 名： RegGetAdpName
  功    能： 
  算法实现： 
  全局变量： 
  参    数： s8* lpszAdpName
             u8 byLen   //数组长度
  返 回 值： BOOL32 
=============================================================================*/
//BOOL32 RegGetAdpName(s8* lpszAdpName, u16 wLen);

/*=============================================================================
函 数 名： RegGetIpAdr
功    能： 返回IP字符串，以'\0'分割，以两个连续的'\0'表示结束
算法实现： 
全局变量： 
参    数： s8* lpszAdapterName
           s8* pIpAddr
           u32 &dwLen [IN/OUT]//IP数组长度
返 回 值： u16 成功返回ERROR_SUCCESS，如果返回ERROR_NOT_ENOUGH_MEMORY，则wlen返回实际需要的u32个数
=============================================================================*/
u32 RegGetIpAdr(s8* lpszAdapterName, s8* pIpAddr, u32 &dwLen);

/*=============================================================================
函 数 名： RegGetIpAdr
功    能： 获得以u32形式表示的IP地址
算法实现： 
全局变量： 
参    数： s8* lpszAdapterName
           u32* pdwIpAddr       ：缓存地址
           u32 &dwLen            ：缓存空间长度
返 回 值： u32 ：成功返回ERROR_SUCCESS，如果返回ERROR_NOT_ENOUGH_MEMORY，则wlen返回实际需要的u32个数
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/6/24   4.0			周广程                  创建
=============================================================================*/
u32 RegGetIpAdr(s8* lpszAdapterName, u32* pdwIpAddr, u32 &dwLen);

/*=============================================================================
  函 数 名： RegGetNetMask
  功    能： 
  算法实现： 
  全局变量： 
  参    数： s8* lpszAdapterName
             s8* pNetMask
             u32 &dwLen  [IN/OUT] //NetMask数组长度
  返 回 值： u32 成功返回ERROR_SUCCESS，如果返回ERROR_NOT_ENOUGH_MEMORY，则wlen返回实际需要的u32个数 
=============================================================================*/
u32 RegGetNetMask(s8* lpszAdapterName, s8* pNetMask, u32 &dwLen);

/*=============================================================================
函 数 名： RegGetNetMask
功    能： 获得以u32形式表示的掩码
算法实现： 
全局变量： 
参    数： s8* lpszAdapterName
           u32* pdwNetMask
           u32 &dwLen
返 回 值： u16 成功返回ERROR_SUCCESS，如果返回ERROR_NOT_ENOUGH_MEMORY，则dwlen返回实际需要的u32个数 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/6/24   4.0			周广程                  创建
=============================================================================*/
u32 RegGetNetMask(s8* lpszAdapterName, u32* pdwNetMask, u32 &dwLen);

/*=============================================================================
函 数 名： RegGetNetGate
功    能： 
算法实现： 
全局变量： 
参    数： s8* lpszAdapterName
           s8* pNetGate
           u32 &dwLen
返 回 值： u32 
=============================================================================*/
u32 RegGetNetGate(s8* lpszAdapterName, s8* pNetGate, u32 &dwLen);

/*=============================================================================
函 数 名： RegGetNetGate
功    能： 
算法实现： 
全局变量： 
参    数： s8* lpszAdapterName
           u32* pdwNetGate
           u32 &dwLen
返 回 值： u32 
=============================================================================*/
u32 RegGetNetGate(s8* lpszAdapterName, u32* pdwNetGate, u32 &dwLen);

/*=============================================================================
  函 数 名： RegSetIpAdr
  功    能： 
  算法实现： 
  全局变量： 
  参    数： s8* pIpAddr
             u32 dwLen //IP数组长度
  返 回 值： u32 
=============================================================================*/
u32 RegSetIpAdr(s8* lpszAdapterName, s8* pIpAddr, u32 dwLen);

/*=============================================================================
函 数 名： RegSetIpAdr
功    能： 
算法实现： 
全局变量： 
参    数： s8* lpszAdapterName
           u32 * pdwIpAddr
           u32 dwLen
返 回 值： u32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/6/24   4.0			周广程                  创建
=============================================================================*/
u32 RegSetIpAdr(s8* lpszAdapterName, u32 * pdwIpAddr, u32 dwLen);

/*=============================================================================
  函 数 名： RegSetNetMask
  功    能： 
  算法实现： 
  全局变量： 
  参    数： s8* pNetMask
             u32 dwLen   [IN] //NetMask数组长度
  返 回 值： u32 
=============================================================================*/
u32 RegSetNetMask(s8* lpszAdapterName, s8* pNetMask, u32 dwLen);

/*=============================================================================
函 数 名： RegSetNetMask
功    能： 
算法实现： 
全局变量： 
参    数： s8* lpszAdapterName
           u32* pdwNetMask
           u32 dwLen
返 回 值： u32 
=============================================================================*/
u32 RegSetNetMask(s8* lpszAdapterName, u32* pdwNetMask, u32 dwLen);

/*=============================================================================
函 数 名： RegSetNetGate
功    能： 
算法实现： 
全局变量： 
参    数： const s8* lpszAdapterName
           s8* pNetGate
           u32 dwLen
返 回 值： u32 
=============================================================================*/
u32 RegSetNetGate(const s8* lpszAdapterName, s8* pNetGate, u32 dwLen);

/*=============================================================================
函 数 名： RegSetNetGate
功    能： 
算法实现： 
全局变量： 
参    数： const s8* lpszAdapterName
           u32* pdwNetGate
           u32 dwLen
返 回 值： u32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/6/24   4.0			周广程                  创建
=============================================================================*/
u32 RegSetNetGate(const s8* lpszAdapterName, u32* pdwNetGate, u32 dwLen);

BOOL32 RegGetRoute(TRoute * ptRoute, u32 wLen);
BOOL32 RegAddRoute(TRoute * ptRoute );
BOOL32 RegDelRoute(TRoute * ptRoute );
BOOL32 RegDelRouteAll(void);
u32    RegGetRouteNum(void);


/*=============================================================================
函 数 名： GetLocalIp
功    能： 
算法实现： 
全局变量： 
参    数： 
返 回 值： u32 
=============================================================================*/
//u32 GetLocalIp();

/*=============================================================================
函 数 名： AddAdapterIp
功    能： 
算法实现： 
全局变量： 
参    数：  u32 dwIpAddr
           u32 dwIpMask
           s8 * pchAdapterName
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/3/31   4.0		    周广程                  创建
=============================================================================*/
BOOL32 AddAdapterIp( u32 dwIpAddr, u32 dwIpMask, s8 * pchAdapterName );

/*=============================================================================
函 数 名： SetAdapterIp
功    能： 
算法实现： 
全局变量： 
参    数：  TNetParam * ptNetParam
           u16 wParamNum
           s8 * pchAdapterName
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/3/31   4.0		周广程                  创建
=============================================================================*/
BOOL32 SetAdapterIp( TNetParam * ptNetParam, u16 wParamNum, s8 * pchAdapterName );

/*=============================================================================
函 数 名： AddDefaultGW
功    能： 
算法实现： 
全局变量： 
参    数： u32 dwGWAddr
           s8 * pchAdapterName
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/3/31   4.0		周广程                  创建
=============================================================================*/
BOOL32 AddDefaultGW( u32 dwGWAddr, s8 * pchAdapterName );

/*=============================================================================
函 数 名： DelDefaultGW
功    能： 
算法实现： 
全局变量： 
参    数： s8 * pchAdapterName
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/5/13   4.0		周广程                  创建
=============================================================================*/
BOOL32 DelDefaultGW( const s8 * pchAdapterName );

/*=============================================================================
函 数 名： SetDefaultGW
功    能： 
算法实现： 
全局变量： 
参    数： u32 *pdwGWAddr
           u16 wGWNum
           s8 * pchAdapterName
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/3/31   4.0		周广程                  创建
=============================================================================*/
BOOL32 SetDefaultGW( u32 *pdwGWAddr, u16 wGWNum, s8 * pchAdapterName );

/*=============================================================================
函 数 名： IsIpAddrIn
功    能： 
算法实现： 
全局变量： 
参    数：  u32 dwIpAddr
           s8 * pchAdapterName
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/3/31   4.0		    周广程                  创建
=============================================================================*/
BOOL32 IsIpAddrIn( u32 dwIpAddr, s8 * pchAdapterName );

/*=============================================================================
函 数 名： DelAdapterIp
功    能： 
算法实现： 
全局变量： 
参    数：  u32 dwIpAddr
           s8 * pchAdapterName
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/3/31   4.0		周广程                  创建
=============================================================================*/
BOOL32 DelAdapterIp( u32 dwIpAddr, s8 * pchAdapterName );

/*=============================================================================
函 数 名： DelAdapterAllIp
功    能： 删除某网口的所有ip信息
算法实现： 
全局变量： 
参    数：  TNetAdaptInfo * ptNetAdapt 
           
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/4/17   4.6		    薛亮                  创建
=============================================================================*/
BOOL32 DelAdapterAllIp(TNetAdaptInfo * ptNetAdapt);
/*=============================================================================
函 数 名： SetAdapterRoute
功    能： 
算法实现： 
全局变量： 
参    数：  TRoute * ptRoute
           u32 wRouteNum
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/4/9   4.0		周广程                  创建
=============================================================================*/
BOOL32 SetAdapterRoute( TRoute * ptRoute, u32 dwRouteNum );
BOOL32 GetAdapterRoute( TRoute * ptRoute, u32 dwRouteNum );

/*=============================================================================
函 数 名： NotifyIPChange
功    能： 
算法实现： 
全局变量： 
参    数： LPCTSTR lpszAdapterName
           u32 nIndex
           LPCTSTR pIPAddress
           LPCTSTR pNetMask
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/3/31   4.0		周广程                  创建
=============================================================================*/
typedef BOOL (WINAPI *BDHCPNOTIFYPROC)( LPWSTR lpwszServerName, // 本地机器为NULL 
                                        LPWSTR lpwszAdapterName, // 适配器名称 
                                        BOOL bNewIpAddress, // TRUE表示更改IP 
                                        DWORD dwIpIndex, // 指明第几个IP地址，如果只有该接口只有一个IP地址则为0 
                                        DWORD dwIpAddress, // IP地址 
                                        DWORD dwSubNetMask, // 子网掩码 
                                        int nDhcpAction ); // 对DHCP的操作 0:不修改, 1:启用 DHCP，2:禁用 DHCP 
BOOL32 NotifyIPChange(LPCTSTR lpszAdapterName, s32 nIndex, LPCTSTR pIPAddress, LPCTSTR pNetMask); 

//网卡操作函数
BOOL StateChange( DWORD NewState, DWORD SelectedItem, HDEVINFO hDevInfo );
u32 GetRegistryProperty( HDEVINFO hDevInfo, PSP_DEVINFO_DATA DeviceInfoData, ULONG Property, PVOID Buffer, PULONG Length );
BOOL IsSpecNetCard( HDEVINFO hDevInfo, PSP_DEVINFO_DATA DeviceInfoData, const s8 * pchAdapterName  );
BOOL32 NetCardOper( const s8 * pchAdapterName, BOOL32 bStart );

#endif //WIN32



#ifdef _LINUX_
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<读写配置相关>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
//                         (仅在LINUX平台上使用)
//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
/*=============================================================================
函 数 名： ExecShellCmd
功    能： 执行shell脚本，不会继承父进程的文件描述符(文件、socket等等)
算法实现： 类同于system函数
全局变量： 
参    数： 
注    意： 
返 回 值： int : 0表示正常，其他值表示出错
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/11/18   4.7	    彭国锋                  创建
=============================================================================*/
static int ExecShellCmd(const char * cmdstring);

/*=============================================================================
函 数 名： SetSshUp
功    能： 启用SSH服务
算法实现： Shell命令
全局变量： 
参    数： 
注    意： 
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/16   4.7		    彭国锋                  创建
=============================================================================*/
BOOL32	SetSshUp(void);

/*=============================================================================
函 数 名： SetSshDown
功    能： 禁用SSH服务
算法实现： Shell命令
全局变量： 
参    数： 
注    意： 
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/16   4.7		    彭国锋                  创建
=============================================================================*/
BOOL32  SetSshDown(void);

/*=============================================================================
函 数 名： SetSshUp
功    能： 启用Telnet服务
算法实现： Shell命令
全局变量： 
参    数： 
注    意： 
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/16   4.7		    彭国锋                  创建
=============================================================================*/
BOOL32	SetTelnetUp(void);

/*=============================================================================
函 数 名： SetTelnetDown
功    能： 禁用Telnet服务
算法实现： Shell命令
全局变量： 
参    数： 
注    意： 
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/16   4.7		    彭国锋                  创建
=============================================================================*/
BOOL32	SetTelnetDown(void);

/*=============================================================================
函 数 名： SetFtpUp
功    能： 启用Ftp服务
算法实现： Shell命令
全局变量： 
参    数： 
注    意： 
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/16   4.7		    彭国锋                  创建
=============================================================================*/
BOOL32	SetFtpUp(void);

/*=============================================================================
函 数 名： SetFtpDown
功    能： 禁用Ftp服务
算法实现： Shell命令
全局变量： 
参    数： 
注    意： 
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/16   4.7		    彭国锋                  创建
=============================================================================*/
BOOL32	SetFtpDown(void);

/*=============================================================================
函 数 名： GetLinuxOsType
功    能： 获得linux系统的具体类型
算法实现： Shell命令
全局变量： 
参    数： 
注    意： 目前只支持redhat(centOS)和ubuntu
返 回 值： u8 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/16   4.7		    彭国锋                  创建
=============================================================================*/
u8		GetOsType(void);

/*=============================================================================
函 数 名： GetDefaultGW
功    能： 获得默认网关
算法实现： 
全局变量： 
参    数： u32 &dwDefaultGW
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/4/2   4.0		周广程                  创建
=============================================================================*/
BOOL32 GetDefaultGW( u32 dwIfIndex, u32 &dwDefaultGW );

/*=============================================================================
函 数 名： SetDefaultGW
功    能： 设置默认网关
算法实现： 
全局变量： 
参    数：  u32 dwIfIndex
           u32 dwDefaultGW
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/4/2   4.0		周广程                  创建
=============================================================================*/
BOOL32 SetDefaultGW( u32 dwIfIndex, u32 dwDefaultGW );

/*=============================================================================
函 数 名： DelDefaultGW
功    能： 
算法实现： 
全局变量： 
参    数：  u32 dwIfIndex
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/4/3   4.0		周广程                  创建
=============================================================================*/
BOOL32 DelDefaultGW( u32 dwIfIndex );


/*=============================================================================
函 数 名： SetAdapterIp
功    能： 
算法实现： 
全局变量： 
参    数：  u32 dwIfIndex
           TNetParam tIp
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/4/2   4.0		周广程                  创建
=============================================================================*/
BOOL32 SetAdapterIp( u32 dwIfIndex, TNetParam tIp );

/*=============================================================================
函 数 名： AddAdapterIp
功    能： 
算法实现： 
全局变量： 
参    数：  u32 dwIfIndex
           TNetParam tIp
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/5/26   4.0			周广程                  创建
=============================================================================*/
BOOL32 AddAdapterIp( u32 dwIfIndex, TNetParam tIp );

/*=============================================================================
函 数 名： DelAdapterIp
功    能： 
算法实现： 
全局变量： 
参    数：  u32 dwIfIndex
           u32 dwIp
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/4/3   4.0		周广程                  创建
=============================================================================*/
BOOL32 DelAdapterIp( u32 dwIfIndex, u32 dwIp );

/*=============================================================================
函 数 名： DelAdapterIp
功    能： 删除对应网口的所有ip
算法实现： 
全局变量： 
参    数：  u32 dwIfIndex
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2010.326    4.6			薛亮                  创建
=============================================================================*/
BOOL32 DelAdapterAllIp(u32 dwIfIndex);

BOOL32 SetHWaddrToAdapter( u32 dwIfIndex,  s8 *pHwAddrStr );
/*=============================================================================
函 数 名： NetCardOper
功    能： 
算法实现： 
全局变量： 
参    数：  u32 dwIfIndex
           BOOL32 bStart
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/6/16   4.0			周广程                  创建
=============================================================================*/
BOOL32 NetCardOper( u32 dwIfIndex, BOOL32 bStart );

/*=============================================================================
函 数 名： IsValidEthIfFileName
功    能： 
算法实现： 
全局变量： 
参    数： const s8 * pchEthIfFileName
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/6/17   4.0			周广程                  创建
=============================================================================*/
BOOL32 IsValidEthIfFileName( const s8 * pchEthIfFileName );

/*=============================================================================
函 数 名： GetEthIdxbyEthIfFileName
功    能： 对形如ifcfg-ethX 或者 ifcfg-ethX:X之类的网口配置文件名，取得网口号
算法实现： 
全局变量： 
参    数： const s8 * pchEthIfFileName
返 回 值： s8  
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/6/18   4.0			周广程                  创建
=============================================================================*/
s8  GetEthIdxbyEthIfFileName( const s8 * pchEthIfFileName );

/*=============================================================================
函 数 名： IsValidEthIfName
功    能： 对形如 ethX 或 ethX:Y 的网口名，判断是否合法
算法实现： 
全局变量： 
参    数： const s8 * pchEthIfName
返 回 值： BOOL32 
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/6/25   4.0			周广程                  创建
=============================================================================*/
BOOL32 IsValidEthIfName( const s8 * pchEthIfName );

/*=============================================================================
函 数 名： GetEthIdxbyEthIfName
功    能： 对形如 ethX 或 ethX:Y 的网口名，取得网口号
算法实现： 
全局变量： 
参    数： const s8 * pchEthIfName
返 回 值： s8  
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2009/6/25   4.0			周广程                  创建
=============================================================================*/
s8  GetEthIdxbyEthIfName( const s8 * pchEthIfName );

/*=============================================================================
函 数 名： GetEthSubIdByEthName
功    能： 对形如 ethX 或 ethX:Y 的网口名，取得子网口号如，Y 或 INVALID_ETHID
算法实现： 
全局变量： 
参    数： const s8 * pchEthIfName
返 回 值： s8  
----------------------------------------------------------------------
修改记录    ：
日  期		版本		修改人		走读人    修改内容
2013/9/25   4.7			彭国锋                  创建
=============================================================================*/
u8  GetEthSubIdByEthName(const s8 *pachEthName, u8 byEthMainId);

//detect certain eth's status (can be use to detect if the wire broken)
s32 GetLinkStat(s8 *ifname);

//check if certain eth's enabled or not
s32 GetEthEnStat(s8 *ifname);


/*=============================================================================
函 数 功 能 : 对形式为 XXX=YYY 的配置文件进行操作的函数组，无需段名
=============================================================================*/
s32 WWriteKeyValueString( FILE *stream, s32 sdwOffsetCurLine, s32 sdwOffsetNextLine, const s8* lpszKeyName, const s8* lpszKeyValue );
s32 WReadWriteKeyValueString( FILE *stream, const s8* lpszKeyName, s8* lpszKeyValue, u32 dwBufSize, BOOL32 bWrite );
BOOL32 WGetRegKeyString2( FILE *stream, const s8* lpszKeyName, s8*  lpszReturnValue, u32 dwBufSize );
BOOL32 WGetRegKeyString( const s8* lpszProfileName, const s8* lpszKeyName, s8*  lpszReturnValue, u32 dwBufSize );
BOOL32 WSetRegKeyString( const s8* lpszProfileName,  const s8* lpszKeyName, const s8* lpszValue);
BOOL32 WDeleteRegKey( const s8* lpszProfileName, const s8* lpszKeyName );

//通知升级守卫升级成功[5/10/2012 chendaiwei]
BOOL32 NotfiyGuardUpdateSuccess( const s8* lpszLocalProcessName );

#endif	// LINUX

#endif	// _COMMONLIB_H_



